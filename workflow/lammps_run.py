# lammps_run.py

import os
import logging
from utils.utils import create_path, make_iter_name

def run_lammps(iter_index, jdata, mdata):
    """Run LAMMPS for model deviation.

    Args:
        iter_index (int): Current iteration index.
        jdata (dict): Job configuration dictionary.
        mdata (dict): Machine configuration dictionary.
    """
    lmp_exec = mdata.get('lmp_command', 'lmp_serial')
    model_devi_steps = jdata['model_devi_steps']
    model_devi_dt = jdata['model_devi_dt']
    model_devi_neidelay = None
    if 'model_devi_neidelay' in jdata:
        model_devi_neidelay = jdata['model_devi_neidelay']
    model_devi_traj_freq = jdata['model_devi_traj_freq']
    model_devi_path = os.path.join(make_iter_name(iter_index), model_devi_name)
    model_devi_task_dir = os.path.join(model_devi_path, 'task.*')

    # Run LAMMPS
    if model_devi_neidelay is None:
        lmp_command = f"{lmp_exec} -i input.lammps -v restart 0 " \
                      f"-v STEPS {model_devi_steps} " \
                      f"-v TIMESTEP {model_devi_dt} " \
                      f"-v TRAJ_FREQ {model_devi_traj_freq}"
    else:
        lmp_command = f"{lmp_exec} -i input.lammps -v restart 0 " \
                      f"-v STEPS {model_devi_steps} " \
                      f"-v TIMESTEP {model_devi_dt} " \
                      f"-v NEIDELAY {model_devi_neidelay} " \
                      f"-v TRAJ_FREQ {model_devi_traj_freq}"

    # TODO: Implement the logic to run LAMMPS based on the configuration.
    # e.g., submit_job(model_devi_task_dir, lmp_command)

def _make_lammps_input(input_file, jdata):
    """Create LAMMPS input file.

    Args:
        input_file (str): Path to the input file.
        jdata (dict): Job configuration dictionary.

    Returns:
        str: Content of the LAMMPS input file.
    """
    model_devi_steps = jdata['model_devi_steps']
    model_devi_dt = jdata['model_devi_dt']
    model_devi_neidelay = None
    if 'model_devi_neidelay' in jdata:
        model_devi_neidelay = jdata['model_devi_neidelay']
    model_devi_traj_freq = jdata['model_devi_traj_freq']

    content = "# LAMMPS input file generated by dpgen\n"
    content += f"variable STEPS index {model_devi_steps}\n"
    content += f"variable TIMESTEP index {model_devi_dt}\n"
    content += f"variable TRAJ_FREQ index {model_devi_traj_freq}\n"
    if model_devi_neidelay is not None:
        content += f"variable NEIDELAY index {model_devi_neidelay}\n"
    content += "# TODO: Add more LAMMPS commands and settings.\n"
    
    with open(input_file, 'w') as f:
        f.write(content)
    
    return content

def get_lammps_input(iter_index, jdata):
    """Get the LAMMPS input file content.

    Args:
        iter_index (int): Current iteration index.
        jdata (dict): Job configuration dictionary.

    Returns:
        str: Content of the LAMMPS input file.
    """
    model_devi_path = os.path.join(make_iter_name(iter_index), model_devi_name)
    lmp_input_file = os.path.join(model_devi_path, 'input.lammps')
    if not os.path.exists(lmp_input_file):
        create_path(model_devi_path)
        _make_lammps_input(lmp_input_file, jdata)
    
    with open(lmp_input_file, 'r') as f:
        content = f.read()
    
    return content

def check_finished(fname):
    """Check if a LAMMPS job has finished based on the log file.

    Args:
        fname (str): Path to the LAMMPS log file.

    Returns:
        bool: Whether the job has finished.
    """
    with open(fname, 'rb') as f:
        content = f.read()
        if b'Total wall time:' in content:
            return True
    return False